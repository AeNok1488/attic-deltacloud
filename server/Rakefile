#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require 'rake'
require 'rake/testtask'
require 'rubygems/package_task'

$top_srcdir = File.dirname(__FILE__)
$:.unshift File.join($top_srcdir, 'lib')

begin
  require 'yard'
  YARD::Rake::YardocTask.new do |t|
    t.files   = ['lib/**/*.rb', '*.rb']   # optional
  end
rescue LoadError
end

spec = Gem::Specification.load('deltacloud-core.gemspec')

Gem::PackageTask.new(spec) do |pkg|
  pkg.need_tar = true
end

namespace :mock do
  namespace :fixtures do
    desc "Setup Mock driver fixtures"
    task 'setup' do
      if ENV["DELTACLOUD_MOCK_STORAGE"]
        storage_root = ENV["DELTACLOUD_MOCK_STORAGE"]
      elsif ENV["USER"]
        storage_root = File::join("/var/tmp", "deltacloud-mock-#{ENV["USER"]}")
      else
        raise "Please set either the DELTACLOUD_MOCK_STORAGE or USER environment variable"
      end
      data = Dir::glob(File::join(File::dirname(__FILE__), "lib", "deltacloud", "drivers", "mock", "data", "*"))
      FileUtils::mkdir_p(storage_root, :verbose => true)
      FileUtils::cp_r(data, storage_root, :verbose => true)
    end

    desc "Remove Mock driver fixtures"
    task 'clean' do
      if ENV["DELTACLOUD_MOCK_STORAGE"]
        storage_root = ENV["DELTACLOUD_MOCK_STORAGE"]
      elsif ENV["USER"]
        storage_root = File::join("/var/tmp", "deltacloud-mock-#{ENV["USER"]}")
      else
        raise "Please set either the DELTACLOUD_MOCK_STORAGE or USER environment variable"
      end
      FileUtils::rm_rf(storage_root, :verbose => true)
    end

    desc "Reset Mock driver fixtures"
    task 'reset' do
      Rake::Task["mock:fixtures:clean"].reenable
      Rake::Task["mock:fixtures:clean"].invoke
      Rake::Task["mock:fixtures:setup"].reenable
      Rake::Task["mock:fixtures:setup"].invoke
    end

  end
end

desc "List the routes defined by Rabbit"
task :routes do
  load File.join(File.dirname(__FILE__), 'config.ru')
  Deltacloud.collections.each do |c|
    puts "\033[1;32;m#{c.name}\33[0m"
    c.operations.each do |o|
      puts "\033[1;37m%6s\033[0m :%-10s %-30s (%s)" % [
        o.http_method.to_s.upcase,
        o.operation_name,
        o.full_path,
        o.description[0..100]
      ]
    end
    unless c.collections.empty?
      puts
      c.collections.each do |s|
        puts "\033[1;32;m#{s.name}\33[0m"
        s.operations.each do |o|
          puts "\033[1;37m%6s\033[0m :%-10s %-30s (%s)" % [
            o.http_method.to_s.upcase,
            o.operation_name,
            o.full_path,
            o.description[0..100]
          ]
        end
      end
    end
    puts
  end
end

Rake::TestTask.new do |t|
  t.ruby_opts << '-r./tests/test_helper.rb'   # Load SimpleCov when COVERAGE=1 is set
  unless RUBY_VERSION < '1.9.0'
    t.loader = :testrb
  end
  t.test_files = FileList[
    'tests/helpers/**/*test.rb',              # Deltacloud extensions (core_ext) and other helpers
    'tests/drivers/base/*test.rb',            # Deltacloud drivers API tests
    'tests/drivers/models/*test.rb',          # Deltacloud models tests
    'tests/deltacloud/*test.rb',              # Deltacloud internal API tests
    'tests/deltacloud/collections/*test.rb',  # Deltacloud collections
    'tests/drivers/mock/*test.rb',            # Deltacloud Mock driver specific unit tests
    'tests/drivers/ec2/*test.rb'              # Deltacloud EC2 driver specific unit tests
  ]
end
